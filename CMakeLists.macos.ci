# Project configuration
cmake_minimum_required(VERSION 3.15)
project(dtcc-solar)

# Set default build type to Release
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
  message(STATUS "Build type not specified, using Release by default")
endif()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")

# Compiler settings
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(MSVC)
  add_compile_options(/W3)
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2")
else()
  add_compile_options(
    -Wall
    -Werror
    -Wno-unused-but-set-variable
    -Wno-reorder
  )
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -pg -DLLVM_ENABLE_ASSERTIONS=ON")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
endif()

# Add path to local CMake scripts
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

# clang-tidy, clang-format integration (not on Windows)
if(NOT WIN32)
  include(cmake/clang-cxx-dev-tools.cmake)
endif()

# Python and pybind11 (use the same interpreter pip is using)
find_package(Python3 COMPONENTS Interpreter Development.Module REQUIRED)

execute_process(
  COMMAND "${Python3_EXECUTABLE}" -c "import pybind11, sys; sys.stdout.write(pybind11.get_cmake_dir())"
  OUTPUT_VARIABLE pybind11_DIR
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
set(pybind11_DIR "${pybind11_DIR}" CACHE PATH "Path to pybind11 CMake files")
find_package(pybind11 CONFIG REQUIRED)

# Eigen (header-only)
find_package(Eigen3 3.3 REQUIRED NO_MODULE)
get_target_property(EIGEN_INCLUDES Eigen3::Eigen INTERFACE_INCLUDE_DIRECTORIES)
message(STATUS "Eigen include dirs: ${EIGEN_INCLUDES}")

if(APPLE)
  # Prefer libomp from Homebrew (supports both arm64 and x86 runners)
  set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
  set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
  set(OpenMP_C_LIB_NAMES "omp")
  set(OpenMP_CXX_LIB_NAMES "omp")

  set(_libomp_roots
    "/opt/homebrew/opt/libomp"
    "/usr/local/opt/libomp"
  )

  foreach(_root IN LISTS _libomp_roots)
    if(NOT EXISTS "${_root}")
      continue()
    endif()
    if(NOT OpenMP_omp_LIBRARY AND EXISTS "${_root}/lib/libomp.dylib")
      set(OpenMP_omp_LIBRARY "${_root}/lib/libomp.dylib")
    endif()
    if(NOT OpenMP_INCLUDE_DIR AND EXISTS "${_root}/include")
      set(OpenMP_INCLUDE_DIR "${_root}/include")
    endif()
  endforeach()

  if(OpenMP_INCLUDE_DIR)
    string(APPEND OpenMP_C_FLAGS " -I${OpenMP_INCLUDE_DIR}")
    string(APPEND OpenMP_CXX_FLAGS " -I${OpenMP_INCLUDE_DIR}")
  endif()
endif()

find_package(OpenMP REQUIRED)

if(OpenMP_FOUND)
  message(STATUS "OpenMP found. Enabling parallel support.")
  if(OpenMP_INCLUDE_DIR)
    include_directories(${OpenMP_INCLUDE_DIR})
  endif()
  list(APPEND EXTRA_LIBS OpenMP::OpenMP_CXX)
else()
  message(WARNING "OpenMP not found. Consider installing with 'brew install libomp'")
endif()

# Include project headers
include_directories(${CMAKE_SOURCE_DIR}/src/cpp)

if(APPLE)
  list(APPEND CMAKE_INSTALL_RPATH "@loader_path" "@loader_path/..")
  list(APPEND CMAKE_BUILD_RPATH "@loader_path" "@loader_path/..")
endif()

# Installation setup
set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/src)
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY true)
list(APPEND CMAKE_PREFIX_PATH /home/runner/work/dtcc-solar/dtcc-solar)

# Subdirectories
add_subdirectory(src)

if(NOT WIN32)
  add_subdirectory(tests/cpp)
endif()

if(APPLE AND TARGET py_embree_solar)
  # Collect Embree runtime directories so we can bundle the binaries with the Python module
  set(_embree_bundle_dirs "")
  if(TARGET embree)
    set(_embree_bundle_target embree)
  elseif(TARGET Embree::Embree)
    set(_embree_bundle_target Embree::Embree)
  else()
    set(_embree_bundle_target "")
  endif()

  if(_embree_bundle_target)
    get_target_property(_embree_target_type ${_embree_bundle_target} TYPE)
    if(_embree_target_type STREQUAL "IMPORTED")
      foreach(_cfg IN ITEMS RELEASE DEBUG RELWITHDEBINFO MINSIZEREL)
        get_target_property(_embree_loc ${_embree_bundle_target} IMPORTED_LOCATION_${_cfg})
        if(_embree_loc)
          get_filename_component(_embree_dir "${_embree_loc}" DIRECTORY)
          list(APPEND _embree_bundle_dirs "${_embree_dir}")
        endif()
      endforeach()
      if(NOT _embree_bundle_dirs)
        get_target_property(_embree_loc ${_embree_bundle_target} IMPORTED_LOCATION)
        if(_embree_loc)
          get_filename_component(_embree_dir "${_embree_loc}" DIRECTORY)
          list(APPEND _embree_bundle_dirs "${_embree_dir}")
        endif()
      endif()
    endif()
  endif()

  if(DEFINED embree_DIR)
    get_filename_component(_embree_root "${embree_DIR}" DIRECTORY)
    get_filename_component(_embree_root "${_embree_root}" DIRECTORY)
    get_filename_component(_embree_root "${_embree_root}" DIRECTORY)
    list(APPEND _embree_bundle_dirs "${_embree_root}/lib" "${_embree_root}")
  endif()

  list(REMOVE_DUPLICATES _embree_bundle_dirs)

  set(_embree_copied_dylibs "")
  foreach(_dir IN LISTS _embree_bundle_dirs)
    if(EXISTS "${_dir}")
      file(GLOB _dylibs "${_dir}/*.dylib")
      foreach(_lib_path IN LISTS _dylibs)
        list(APPEND _embree_copied_dylibs "${_lib_path}")
        add_custom_command(TARGET py_embree_solar POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E copy_if_different "${_lib_path}" $<TARGET_FILE_DIR:py_embree_solar>
        )
        install(FILES "${_lib_path}" DESTINATION dtcc_solar)
      endforeach()
    endif()
  endforeach()

  if(_embree_copied_dylibs)
    # Ensure the extension searches its own directory first for the Embree dylibs
    get_target_property(_current_install_rpath py_embree_solar INSTALL_RPATH)
    set(_new_install_rpath ${_current_install_rpath} "@loader_path" "@loader_path/..")
    list(REMOVE_ITEM _new_install_rpath "")
    list(REMOVE_DUPLICATES _new_install_rpath)
    if(_new_install_rpath)
      set_target_properties(py_embree_solar PROPERTIES INSTALL_RPATH "${_new_install_rpath}")
    endif()

    get_target_property(_current_build_rpath py_embree_solar BUILD_RPATH)
    set(_new_build_rpath ${_current_build_rpath} "@loader_path" "@loader_path/..")
    list(REMOVE_ITEM _new_build_rpath "")
    list(REMOVE_DUPLICATES _new_build_rpath)
    if(_new_build_rpath)
      set_target_properties(py_embree_solar PROPERTIES BUILD_RPATH "${_new_build_rpath}")
    endif()
  endif()
endif()

# Pre-commit hook (non-Windows only)
if(NOT WIN32)
  set(_pre_commit_script "${CMAKE_SOURCE_DIR}/utils/git/git-pre-commit-format")
  if(EXISTS "${_pre_commit_script}")
    message("Running pre-commit hook")
    execute_process(
      COMMAND bash -c "${_pre_commit_script} install"
      OUTPUT_VARIABLE outVar
    )
    message("${outVar}")
  else()
    message(STATUS "Skipping pre-commit hook; ${_pre_commit_script} not found")
  endif()
endif()
