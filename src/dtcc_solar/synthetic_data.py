import math
from datetime import datetime, timedelta
import pandas as pd


def synthetic_epw_df(
    city="SyntheticStockholm",
    state="NA",
    country="SyntheticSweden",
    source="Synthetic",
    wmo="000000",
    latitude=59.33,
    longitude=18.06,
    timezone=1,
    elevation=100,
    start=datetime(2024, 1, 1, 0, 0),
    end=datetime(2024, 12, 31, 23, 0),
):
    """
    Generate a synthetic EPW dataframe with all 35 columns (hourly).
    Returns (df, header) so the header can be reused when writing to EPW.
    """

    # ----- header lines (7) -----
    header = []
    header.append(
        f"LOCATION,{city},{state},{country},{source},{wmo},{latitude:.6f},{longitude:.6f},{timezone:.2f},{elevation:.1f}"
    )
    header.append("DESIGN CONDITIONS,0")
    header.append("TYPICAL/EXTREME PERIODS,0")
    header.append("GROUND TEMPERATURES,0")
    header.append("HOLIDAYS/DAYLIGHT SAVINGS,No,0,0,0")
    header.append("COMMENTS 1,Generated by synthetic_epw_df()")
    header.append("COMMENTS 2,All values synthetic for testing only")

    weekday_names = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
    ]
    start_wd = weekday_names[(start.weekday() + 1) % 7]
    header.append(
        f"DATA PERIODS,1,1,Data,{start_wd},{start.month}/{start.day},{end.month}/{end.day}"
    )

    def clamp(x, lo, hi):
        return max(lo, min(hi, x))

    def solar_block(hour_local):
        if 6 <= hour_local <= 18:
            a = math.pi * (hour_local - 6) / 12.0
            return math.sin(a)
        return 0.0

    # iterate hours inclusive
    cur = start
    rows = []
    while cur <= end:
        year, month, day = cur.year, cur.month, cur.day
        hour_1_24 = (cur.hour % 24) + 1
        minute_60 = 60

        diurnal = solar_block(cur.hour)

        dry_bulb = (
            15
            + 10 * math.sin(2 * math.pi * (cur.timetuple().tm_yday - 80) / 365.0)
            + 5 * (diurnal)
        )
        dew_point = dry_bulb - 6.0
        rel_hum = clamp(60 - 20 * diurnal, 10, 95)
        press_pa = 101325 * math.exp(-elevation / 8434.5)

        wind_speed = clamp(1.0 + 4.0 * diurnal, 0.0, 8.0)
        wind_dir = 180.0
        tot_sky_cover_tenths = int(clamp(2 + 6 * (1.0 - diurnal), 0, 10))

        ghi_max = 550.0
        ghi = diurnal * ghi_max
        dni, dhi = 0.0, 0.0
        if ghi > 0:
            dni_frac = clamp(0.2 + 0.6 * diurnal, 0.0, 0.95)
            dni = ghi * dni_frac
            dhi = ghi - dni

        row = [
            year,
            month,
            day,
            hour_1_24,
            minute_60,
            0,
            round(dry_bulb, 1),
            round(dew_point, 1),
            int(rel_hum),
            int(press_pa),
            0,
            0,
            350,
            round(ghi, 1),
            round(dni, 1),
            round(dhi, 1),
            int(ghi * 120),
            int(dni * 100),
            int(dhi * 120),
            int(3000 + 7000 * diurnal),
            int(wind_dir),
            round(wind_speed, 1),
            int(tot_sky_cover_tenths),
            int(max(0, tot_sky_cover_tenths - 1)),
            20,
            99999,
            9,
            "",
            15,
            0.1,
            0,
            0,
            0.2,
            0.0,
            0.0,
        ]
        rows.append(row)
        cur += timedelta(hours=1)

    columns = [
        "Year",
        "Month",
        "Day",
        "Hour",
        "Minute",
        "Source",
        "DryBulb",
        "DewPoint",
        "RelHum",
        "AtmPressure",
        "ExtrHorRad",
        "ExtrDirRad",
        "HorIRSky",
        "GHI",
        "DNI",
        "DHI",
        "GlobalHorIllum",
        "DirectNormalIllum",
        "DiffuseHorIllum",
        "ZenithLuminance",
        "WindDir",
        "WindSpeed",
        "TotalSkyCover",
        "OpaqueSkyCover",
        "Visibility",
        "CeilingHeight",
        "PresWeathObs",
        "PresWeathCodes",
        "PrecipitableWater",
        "AerosolOpticalDepth",
        "SnowDepth",
        "DaysSinceLastSnow",
        "Albedo",
        "Rain",
        "RainSnow",
    ]

    df = pd.DataFrame(rows, columns=columns)
    return df, header


def df_to_epw(df: pd.DataFrame, header: list[str], path: str):
    """
    Write dataframe + header to EPW file at path.
    """
    with open(path, "w", newline="") as f:
        for line in header:
            f.write(line + "\n")
        df.to_csv(f, header=False, index=False)


# Example usage
if __name__ == "__main__":
    df, header = synthetic_epw_df(
        latitude=52.5, longitude=13.4, timezone=+1, elevation=35
    )
    # df_to_epw(df, header, "../data/weather/synthetic_df.epw")
    print("Synthetic EPW written with shape:", df.shape)

    # Print first few rows
    print(df.head())
