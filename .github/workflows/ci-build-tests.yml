name: build-tests

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]

jobs:
  build-and-test:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]#, macos-latest, windows-latest]
    env:
      PYTHON_VERSION: "3.11"
      DTCC_DATA_ROOT: ${{ github.workspace }}/data
      EMBREE_VERSION: "4.3.1"
      EIGEN_VERSION: "3.4.0"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade pip and install build helpers
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools ninja pytest

      - name: Acquire Embree (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euxo pipefail
          ARCHIVE="$RUNNER_TEMP/embree.tar.gz"
          EXTRACT_DIR="$RUNNER_TEMP/embree"
          mkdir -p "$EXTRACT_DIR"
          curl -L -o "$ARCHIVE" "https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/embree-${EMBREE_VERSION}.x86_64.linux.tar.gz"
          tar -xzf "$ARCHIVE" -C "$EXTRACT_DIR"
          EMBREE_ROOT="$EXTRACT_DIR"
          CONFIG_PATH="${EMBREE_ROOT}/lib/cmake/embree-${EMBREE_VERSION}/embree-config.cmake"
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "Embree config not found at $CONFIG_PATH" >&2
            find "$EMBREE_ROOT" -maxdepth 4 -name 'embree-config.cmake'
            exit 1
          fi
          echo "Found Embree config at $CONFIG_PATH"
          sudo mkdir -p /usr/local/include /usr/local/lib/cmake
          sudo cp -r "${EMBREE_ROOT}/include/." /usr/local/include/
          sudo cp -r "${EMBREE_ROOT}/lib/." /usr/local/lib/
          sudo cp -r "${EMBREE_ROOT}/lib/cmake/." /usr/local/lib/cmake/
          sudo ldconfig
          ls -R /usr/local/lib/cmake | grep -m 5 embree || true

      - name: Acquire Embree (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euxo pipefail
          ARCHIVE="$RUNNER_TEMP/embree.zip"
          EXTRACT_DIR="$RUNNER_TEMP/embree"
          mkdir -p "$EXTRACT_DIR"
          curl -L -o "$ARCHIVE" "https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/embree-${EMBREE_VERSION}.x86_64.macosx.zip"
          unzip -q "$ARCHIVE" -d "$EXTRACT_DIR"
          EMBREE_ROOT=$(find "$EXTRACT_DIR" -maxdepth 1 -type d -name 'embree*' | head -n1)
          if [ -z "$EMBREE_ROOT" ]; then
            echo "Failed to locate extracted Embree directory" >&2
            ls -al "$EXTRACT_DIR"
            exit 1
          fi
          CONFIG_PATH="${EMBREE_ROOT}/lib/cmake/embree-${EMBREE_VERSION}/embree-config.cmake"
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "Embree config not found at $CONFIG_PATH" >&2
            find "$EMBREE_ROOT" -maxdepth 4 -name 'embree-config.cmake'
            exit 1
          fi
          echo "Found Embree config at $CONFIG_PATH"
          sudo mkdir -p /usr/local/include /usr/local/lib/cmake
          sudo cp -R "${EMBREE_ROOT}/include/." /usr/local/include/
          sudo cp -R "${EMBREE_ROOT}/lib/." /usr/local/lib/
          sudo cp -R "${EMBREE_ROOT}/lib/cmake/." /usr/local/lib/cmake/
          ls -R /usr/local/lib/cmake | grep -m 5 embree || true

      - name: Acquire Embree (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $archive = Join-Path $env:RUNNER_TEMP 'embree.zip'
          $url = "https://github.com/embree/embree/releases/download/v$($env:EMBREE_VERSION)/embree-$($env:EMBREE_VERSION).x64.vc17.windows.zip"
          Invoke-WebRequest -Uri $url -OutFile $archive
          Expand-Archive -Path $archive -DestinationPath $env:RUNNER_TEMP
          $embreeRoot = Join-Path $env:RUNNER_TEMP ("embree-" + $env:EMBREE_VERSION + ".x64.vc17.windows")
          Add-Content $env:GITHUB_ENV "EMBREE_ROOT=$embreeRoot"
          Add-Content $env:GITHUB_ENV "embree_DIR=$embreeRoot\lib\cmake\embree-$($env:EMBREE_VERSION)"
          Add-Content $env:GITHUB_ENV "CMAKE_ARGS=-Dembree_DIR=$embreeRoot\lib\cmake\embree-$($env:EMBREE_VERSION) -DEMBREE_ROOT=$embreeRoot"
          $existingPrefix = $env:CMAKE_PREFIX_PATH
          if ([string]::IsNullOrEmpty($existingPrefix)) {
            Add-Content $env:GITHUB_ENV "CMAKE_PREFIX_PATH=$embreeRoot"
          } else {
            Add-Content $env:GITHUB_ENV ("CMAKE_PREFIX_PATH=$embreeRoot;$existingPrefix")
          }
          Add-Content $env:GITHUB_ENV "PATH=$embreeRoot\bin;$env:PATH"

      - name: Install Eigen (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y libeigen3-dev
          EIGEN_DIR="/usr/share/eigen3/cmake"
          echo "Eigen3_DIR=$EIGEN_DIR" >> "$GITHUB_ENV"
          EXISTING="${CMAKE_ARGS:-}"
          echo "CMAKE_ARGS=${EXISTING} -DEigen3_DIR=$EIGEN_DIR" >> "$GITHUB_ENV"

      - name: Install Eigen (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euxo pipefail
          brew update
          brew install eigen
          EIGEN_DIR="$(brew --prefix eigen)/share/eigen3/cmake"
          echo "Eigen3_DIR=$EIGEN_DIR" >> "$GITHUB_ENV"
          EXISTING="${CMAKE_ARGS:-}"
          echo "CMAKE_ARGS=${EXISTING} -DEigen3_DIR=$EIGEN_DIR" >> "$GITHUB_ENV"

      - name: Install Eigen (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $archive = Join-Path $env:RUNNER_TEMP 'eigen.zip'
          $url = "https://gitlab.com/libeigen/eigen/-/archive/$($env:EIGEN_VERSION)/eigen-$($env:EIGEN_VERSION).zip"
          Invoke-WebRequest -Uri $url -OutFile $archive
          $dest = Join-Path $env:RUNNER_TEMP ('eigen-' + $env:EIGEN_VERSION)
          Expand-Archive -Path $archive -DestinationPath $env:RUNNER_TEMP
          $eigenRoot = Join-Path $env:RUNNER_TEMP ('eigen-' + $env:EIGEN_VERSION)
          if (-not (Test-Path $eigenRoot)) {
            throw "Eigen directory not found at $eigenRoot"
          }
          $cmakeDir = Join-Path $eigenRoot 'cmake'
          Add-Content $env:GITHUB_ENV "Eigen3_DIR=$cmakeDir"
          $existing = $env:CMAKE_ARGS
          if ([string]::IsNullOrEmpty($existing)) {
            Add-Content $env:GITHUB_ENV "CMAKE_ARGS=-DEigen3_DIR=$cmakeDir"
          } else {
            Add-Content $env:GITHUB_ENV ("CMAKE_ARGS=" + $existing + " -DEigen3_DIR=" + $cmakeDir)
          }

      - name: Install project
        run: |
          python -m pip install .

      - name: Run tests
        working-directory: tests
        run: |
          pytest
