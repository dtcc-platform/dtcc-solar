import math
from datetime import datetime, timedelta


def synthetic_epw(
    path,
    city="SyntheticStockholm",
    state="NA",
    country="SyntheticSweden",
    source="Synthetic",
    wmo="000000",
    latitude=59.33,  # deg (N+ / S-)
    longitude=18.06,  # deg (E+ / W-)
    timezone=1,  # hours from UTC (Mountain ≈ -7)
    elevation=100,  # meters
    start=datetime(2024, 1, 1, 0, 0),
    end=datetime(2024, 12, 31, 23, 0),
):
    """
    Write a synthetic EPW file to `path` with hourly records from start..end (inclusive).
    Solar is a simple sinusoid peaking at solar noon with max GHI≈800 W/m² on clear days.
    All 35 EPW columns are populated with reasonable placeholders.
    """

    # ----- header lines (7) -----
    header = []
    header.append(
        f"LOCATION,{city},{state},{country},{source},{wmo},{latitude:.6f},{longitude:.6f},{timezone:.2f},{elevation:.1f}"
    )
    header.append("DESIGN CONDITIONS,0")
    header.append("TYPICAL/EXTREME PERIODS,0")
    header.append("GROUND TEMPERATURES,0")
    header.append("HOLIDAYS/DAYLIGHT SAVINGS,No,0,0,0")
    header.append("COMMENTS 1,Generated by synthetic_epw()")
    header.append("COMMENTS 2,All values synthetic for testing only")
    # DATA PERIODS: “1 period, hourly, starts on start weekday, from M/D to M/D”
    # EPW expects weekday name capitalized
    weekday_names = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
    ]
    start_wd = weekday_names[start.weekday()]  # Python: Monday=0 ... Sunday=6
    # EPW wants Sunday..Saturday; adjust:
    start_wd = weekday_names[(start.weekday() + 1) % 7]
    header.append(
        f"DATA PERIODS,1,1,Data,{start_wd},{start.month}/{start.day},{end.month}/{end.day}"
    )

    # ----- helpers -----
    def clamp(x, lo, hi):
        return max(lo, min(hi, x))

    # synthetic daily clear-sky-ish profile
    # simple cosine from 6–18 local solar time (peak at 12)
    def solar_block(hour_local):
        if 6 <= hour_local <= 18:
            # Map 6..18 -> 0..pi
            a = math.pi * (hour_local - 6) / 12.0
            return math.sin(a)  # 0..1
        return 0.0

    # iterate hours inclusive
    cur = start
    rows = []
    while cur <= end:
        # EPW time fields:
        year, month, day = cur.year, cur.month, cur.day
        # EPW "Hour" is 1..24, and "Minute" is 60 (end of the hour)
        hour_1_24 = (cur.hour % 24) + 1
        minute_60 = 60

        # local standard time (ignore DST): use wall-clock hour
        diurnal = solar_block(cur.hour)

        # Synthetic meteorology
        dry_bulb = (
            15
            + 10 * math.sin(2 * math.pi * (cur.timetuple().tm_yday - 80) / 365.0)
            + 5 * (diurnal)
        )  # °C
        dew_point = dry_bulb - 6.0  # °C
        rel_hum = clamp(60 - 20 * diurnal, 10, 95)  # %
        press_pa = 101325 * math.exp(-elevation / 8434.5)  # Pa

        # Winds: calm nights, breezier afternoons
        wind_speed = clamp(1.0 + 4.0 * diurnal, 0.0, 8.0)  # m/s
        wind_dir = 180.0  # south wind
        tot_sky_cover_tenths = int(clamp(2 + 6 * (1.0 - diurnal), 0, 10))  # tenths

        # Solar (very simplified)
        ghi_max = 550.0
        ghi = diurnal * ghi_max
        # Split: clearer midday → higher DNI fraction
        dni = 0.0
        dhi = 0.0
        if ghi > 0:
            dni_frac = clamp(0.2 + 0.6 * diurnal, 0.0, 0.95)
            dni = ghi * dni_frac
            dhi = ghi - dni

        # Fill all 35 EPW columns (EnergyPlus 8+ format)
        # Fields (1-based):
        #  1 Year,2 Month,3 Day,4 Hour(1..24),5 Minute(60),6 Data Source/Uncertainty
        #  7 DryBulb(°C),8 DewPoint(°C),9 RelHum(%),10 Atm Pressure(Pa)
        #  11 ExtrHorRad,12 ExtrDirRad,13 HorIRSky,14 GHI,15 DNI,16 DHI
        #  17 GlobalHorIllum,18 DirectNormalIllum,19 DiffuseHorIllum
        #  20 ZenithLuminance,21 WindDir(deg),22 WindSpeed(m/s),23 TotalSkyCover(tenths)
        #  24 OpaqueSkyCover(tenths),25 Visibility(km),26 CeilingHeight(m)
        #  27 PresWeathObs,28 PresWeathCodes,29 PrecipitableWater(mm)
        #  30 AerosolOpticalDepth,31 SnowDepth(cm),32 DaysSinceLastSnow
        #  33 Albedo,34 Rain(mm),35 RainSnow(mm)
        row = [
            year,
            month,
            day,
            hour_1_24,
            minute_60,
            0,
            round(dry_bulb, 1),
            round(dew_point, 1),
            int(rel_hum),
            int(press_pa),
            0,
            0,
            350,  # 11,12,13: leave extraterrestrial zeros, IR sky ~350 W/m2
            round(ghi, 1),
            round(dni, 1),
            round(dhi, 1),  # 14,15,16
            int(ghi * 120),
            int(dni * 100),
            int(dhi * 120),  # 17-19: crude lux-ish
            int(3000 + 7000 * diurnal),  # 20: zenith luminance (cd/m2) rough
            int(wind_dir),
            round(wind_speed, 1),
            int(tot_sky_cover_tenths),
            int(max(0, tot_sky_cover_tenths - 1)),
            20,
            99999,
            9,
            "",
            15,
            0.1,
            0,
            0,
            0.2,
            0.0,
            0.0,
        ]
        rows.append(row)
        cur += timedelta(hours=1)

    # write file
    with open(path, "w", newline="") as f:
        for line in header:
            f.write(line + "\n")
        for r in rows:
            # EPW is comma-separated; strings unquoted is fine
            f.write(",".join(str(x) for x in r) + "\n")

    return path


# Example:
# generate_synthetic_epw("synthetic.epw", latitude=52.5, longitude=13.4, timezone=+1, elevation=35)

if __name__ == "__main__":

    path = "../data/weather/synthetic.epw"
    synthetic_epw(path, latitude=52.5, longitude=13.4, timezone=+1, elevation=35)
